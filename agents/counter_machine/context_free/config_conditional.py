from agents.counter_machine.machine import CounterMachine


class ContextFreeCounterMachine_Conditional(CounterMachine):
    def __init__(self):
        super().__init__()
        self.U = [0, 1]
        self.F = [2]
        self.u_0 = 0

        self.delta_u = {
            # State 0: Collect A N times
            (("A",), 0, ("Z","-","-","-")): 0,
            (("A",), 0, ("NZ","Z","-","-")): 0,
            (("A",), 0, ("NZ","NZ","Z","-")): 0,
            (("A",), 0, ("NZ","NZ","NZ","Z")): 0,
            (("A",), 0, ("NZ","NZ","NZ","NZ")): 2,
            (("B",), 0, ("-","-","-","-")): 1,
            (("C",), 0, ("-","-","-","-")): 2,
            (("D",), 0, ("-","-","-","-")): 2,
            ((), 0, ("-","-","-","-")): 0,

            # State 1: Go to C if N < 2.5 else go to D
            (("A",), 1, ("-","-","-","-")): 2,
            (("B",), 1, ("-","-","-","-")): 2,
            (("C",), 1, ("NZ","Z","Z","Z")): 2,
            (("C",), 1, ("NZ","NZ","Z","Z")): 2,
            (("C",), 1, ("NZ","NZ","NZ","Z")): 2,
            (("C",), 1, ("NZ","NZ","NZ","NZ")): 2,
            (("D",), 1, ("NZ","Z","Z","Z")): 2,
            (("D",), 1, ("NZ","NZ","Z","Z")): 2,
            (("D",), 1, ("NZ","NZ","NZ","Z")): 2,
            (("D",), 1, ("NZ","NZ","NZ","NZ")): 2,            
            ((), 1, ("-","-","-","-")): 1,
        }
        self.delta_c = {
            (("A",), 0, ("Z","-","-","-")): (1,0,0,0),
            (("A",), 0, ("NZ","Z","-","-")): (0,1,0,0),
            (("A",), 0, ("NZ","NZ","Z","-")): (0,0,1,0),
            (("A",), 0, ("NZ","NZ","NZ","Z")): (0,0,0,1),
            (("A",), 0, ("NZ","NZ","NZ","NZ")): (0,0,0,0),
            (("B",), 0, ("-","-","-","-")): (0,0,0,0),
            (("C",), 0, ("-","-","-","-")): (0,0,0,0),
            (("D",), 0, ("-","-","-","-")): (0,0,0,0),
            ((), 0, ("-","-","-","-")): (0,0,0,0),

            (("A",), 1, ("-","-","-","-")): (0,0,0,0),
            (("B",), 1, ("-","-","-","-")): (0,0,0,0),
            (("C",), 1, ("NZ","Z","Z","Z")): (0,0,0,0),
            (("C",), 1, ("NZ","NZ","Z","Z")): (0,0,0,0),
            (("C",), 1, ("NZ","NZ","NZ","Z")): (0,0,0,0),
            (("C",), 1, ("NZ","NZ","NZ","NZ")): (0,0,0,0),
            (("D",), 1, ("NZ","Z","Z","Z")): (0,0,0,0),
            (("D",), 1, ("NZ","NZ","Z","Z")): (0,0,0,0),
            (("D",), 1, ("NZ","NZ","NZ","Z")): (0,0,0,0),
            (("D",), 1, ("NZ","NZ","NZ","NZ")): (0,0,0,0),            
            ((), 1, ("-","-","-","-")): (0,0,0,0),

        }
        self.delta_r = {
            (("A",), 0, ("Z","-","-","-")): 1,
            (("A",), 0, ("NZ","Z","-","-")): 1,
            (("A",), 0, ("NZ","NZ","Z","-")): 1,
            (("A",), 0, ("NZ","NZ","NZ","Z")): 1,
            (("A",), 0, ("NZ","NZ","NZ","NZ")): -1,
            (("B",), 0, ("-","-","-","-")): 1,
            (("C",), 0, ("-","-","-","-")): -1,
            (("D",), 0, ("-","-","-","-")): -1,
            ((), 0, ("-","-","-","-")): 0,

            (("A",), 1, ("-","-","-","-")): -1,
            (("B",), 1, ("-","-","-","-")): -1,
            (("C",), 1, ("NZ","Z","Z","Z")): 1,
            (("C",), 1, ("NZ","NZ","Z","Z")): 1,
            (("C",), 1, ("NZ","NZ","NZ","Z")): -1,
            (("C",), 1, ("NZ","NZ","NZ","NZ")): -1,
            (("D",), 1, ("NZ","Z","Z","Z")): -1,
            (("D",), 1, ("NZ","NZ","Z","Z")): -1,
            (("D",), 1, ("NZ","NZ","NZ","Z")): 1,
            (("D",), 1, ("NZ","NZ","NZ","NZ")): 1,            
            ((), 1, ("-","-","-","-")): 0,

        }
        self._init_transitions()
